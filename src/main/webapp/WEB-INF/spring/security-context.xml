<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- enable Method level vs URL level security -->
	<security:global-method-security pre-post-annotations="enabled" />
	<security:http pattern="/resources/**" security="none" />
	<security:http pattern="/Customers/**" security="none" />
	<security:http pattern="/home" security="none" />
	<security:http pattern="/" security="none" />

	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization - allows SPEL syntax -->
	<security:http use-expressions="true">
	<security:csrf disabled="true"/>
	
		<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
		<!-- the more specific rules need to come first, followed by the more general ones. -->
		<!-- COMMENT out the following to see @Service METHOD level authorization -->
		<security:intercept-url pattern="/login" access="isAnonymous()" />
		<security:intercept-url pattern="/*" access="hasAnyRole('ROLE_ANONYMOUS', 'ROLE_ADMIN')" />
		<security:intercept-url pattern="/home" access="hasAnyRole('ROLE_ANONYMOUS', 'ROLE_ADMIN')" />
		
		<!-- todo -->
		<security:intercept-url pattern="/users" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<security:intercept-url pattern="/product/*" access="hasRole('ROLE_ADMIN')" />
		
		<!-- always-use-default-target overrides where login was triggered routes to default-target-url -->
		<!-- logout-url renames j_security_logout URL -->
		<!-- similarly username, password, login-processing renames j_security_* stuff -->
		<!-- e.g., /j_spring_security_check is default for login-processing-url -->
<!-- 			login-processing-url="/postLogin"  -->
			<security:form-login login-page="/login"		
			username-parameter="username"
			password-parameter="password" 
			default-target-url="/welcome"
			always-use-default-target="true" 
			/>
		<!-- -->

		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout logout-url= 
			"/doLogout" REPLACES it NOTE: is it JUST a URL naming convention - no mapping 
			occurs -->
		<security:logout logout-success-url="/logout"
			delete-cookies="JSESSIONID" logout-url="/doLogout" />
			
		<security:logout logout-url="/doLogout"
			logout-success-url="/logoutSuccess"
			delete-cookies="JSESSIONID"  />

	</security:http>

	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="bcrypt" />
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from users where username=?"
				authorities-by-username-query="select u.username, r.name from users u, role r where u.username = r.username and u.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
